type PromoBanners {
  bpId: ID 
  name: String
  path: String 
  description: String 
  bpState: Int 
  createAt: DateTime 
  updateAt: DateTime 
}
input IPromoBanners {
  bpId: ID 
  name: String
  path: String 
  description: String 
  bpState: Int
  createAt: DateTime 
  updateAt: DateTime 
  image: Upload!
}
type MasterBanners {
  BannerId: ID 
  name: String
  path: String 
  description: String 
  BannersState: Int 
  createAt: DateTime 
  updateAt: DateTime 
}

type Response {
    success: Boolean
    message: String
}

"Entradas para el registro o actualizaci√≥n del perfil de paciente"
input IMasterBanners{
  path: String 
  description: String 
  name: String 
  BannersState: Int
  image: Upload!
}

type Query {
  getAllMasterBanners(search: String, min: Int, max: Int): [MasterBanners]
  getOneMasterBanners(search: String, min: Int, max: Int): MasterBanners
  # promo  
  getAllPromoBanners(search: String, min: Int, max: Int): [PromoBanners]
  getOnePromoBanners(search: String, min: Int, max: Int): PromoBanners
}

type Mutation {
  setBanners(input: IMasterBanners): MasterBanners
  setPromoBanners(input: IPromoBanners): PromoBanners
  deleteOneBannerPromo(bpId: ID, bpState: Int, path: String): Response
  deleteOneBannerMaster(BannerId: ID, BannersState: Int, path: String): Response
}